This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-21T20:18:13.159Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
app/api/generate/route.ts
app/components/Article.tsx
app/components/EmbeddedQuiz.tsx
app/components/InputBar.tsx
app/components/Module.tsx
app/components/ModuleList.tsx
app/components/ProgressBar.tsx
app/components/Quiz.tsx
app/components/QuizPage.tsx
app/components/Sidebar.tsx
app/context/LearnContext.tsx
app/globals.css
app/layout.tsx
app/page.tsx
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: app/api/generate/route.ts
================
// app/api/generate/route.ts
import { NextResponse } from 'next/server';
import axios from 'axios';

export async function POST(request: Request) {
  try {
    const { topic } = await request.json();

    const prompt = `
      You are an educational content generator utilizing the GPT-4o model. Based on the topic "${topic}", generate a structured course outline with modules. Each module should include:
      
      1. **Detailed Article:** An in-depth explanation of the module topic, using markdown formatting for better readability. Include headings, lists, and emphasis where appropriate. Use LaTeX for mathematical equations when necessary.
      
      2. **Embedded Interactive Questions:** Within the article, integrate 2-3 multiple-choice questions that require critical thinking and application of the concepts, not just simple recall. Format these questions as follows:
         
         [QUIZ]
         Question: [A challenging question that requires applying the concept]
         Options:
         A) [Option A]
         B) [Option B]
         C) [Option C]
         D) [Option D]
         Answer: [Correct option letter]
         Explanation: [Detailed explanation of why this answer is correct and why others are incorrect]
         [/QUIZ]
      
      3. **Extended Quiz:** At the end of each module, provide a comprehensive quiz with 8-10 multiple-choice questions. These should be complex, scenario-based questions that test deep understanding and application of the material. Use the same format as the embedded questions.
      
      Ensure that the content is thorough and covers the topic in detail. Generate at least 3 modules for the topic.
      
      Provide the response in JSON format with the following structure:
      {
        "modules": [
          {
            "title": "Module Title",
            "article": "Detailed article content with embedded questions...",
            "quiz": {
              "questions": [
                {
                  "question": "Question text",
                  "options": ["Option A", "Option B", "Option C", "Option D"],
                  "answer": "Correct Option",
                  "explanation": "Explanation for the correct answer."
                },
                ...
              ]
            }
          },
          ...
        ]
      }
    `;


    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o-2024-08-06',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7,
        max_tokens: 12000, // Increased tokens for more detailed content
      },
      {
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        },
      }
    );

    const data = response.data;
    if (!data.choices || !data.choices[0] || !data.choices[0].message || !data.choices[0].message.content) {
      throw new Error('Unexpected API response structure');
    }
    const content = data.choices[0].message.content;
    const jsonContent = content.replace(/```json\n|\n```/g, '');
    const parsed = JSON.parse(jsonContent);

    return NextResponse.json(parsed);
  } catch (error) {
    console.error('Error details:', error);
    if (error instanceof Error) {
      console.error('Error message:', error.message);
      console.error('Error stack:', error.stack);
    }
    return NextResponse.json({ error: 'Something went wrong' }, { status: 500 });
  }
}

================
File: app/components/Article.tsx
================
// app/components/Article.tsx
import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import 'katex/dist/katex.min.css';
import remarkGfm from 'remark-gfm';
import EmbeddedQuiz from '@/app/components/EmbeddedQuiz';

interface ArticleProps {
  content: string;
}

const Article: React.FC<ArticleProps> = ({ content }) => {
  const renderContent = () => {
    const parts = content.split(/(\[QUIZ\].*?\[\/QUIZ\])/s);
    return parts.map((part, index) => {
      if (part.startsWith('[QUIZ]') && part.endsWith('[/QUIZ]')) {
        const quizContent = part.replace('[QUIZ]', '').replace('[/QUIZ]', '').trim();
        const lines = quizContent.split('\n');
        const question = lines[0].replace('Question: ', '');
        const options = lines.slice(2, -3).map(option => option.trim().substring(3));
        const answer = lines[lines.length - 2].replace('Answer: ', '');
        const explanation = lines[lines.length - 1].replace('Explanation: ', '');
        
        return (
          <EmbeddedQuiz
            key={index}
            question={question}
            options={options}
            answer={answer}
            explanation={explanation}
          />
        );
      } else {
        return (
          <ReactMarkdown
            key={index}
            remarkPlugins={[remarkMath, remarkGfm]}
            rehypePlugins={[rehypeKatex]}
          >
            {part}
          </ReactMarkdown>
        );
      }
    });
  };

  return <div className="prose max-w-none">{renderContent()}</div>;
};

export default Article;

================
File: app/components/EmbeddedQuiz.tsx
================
// app/components/EmbeddedQuiz.tsx
import { useState } from 'react';

interface EmbeddedQuizProps {
  question: string;
  options: string[];
  answer: string;
  explanation: string;
}

const EmbeddedQuiz = ({ question, options, answer, explanation }: EmbeddedQuizProps) => {
  const [selectedOption, setSelectedOption] = useState<string | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);

  const handleOptionClick = (option: string) => {
    setSelectedOption(option);
    setShowExplanation(true);
  };

  return (
    <div className="my-6 p-6 bg-indigo-50 border border-indigo-200 rounded-lg shadow-md">
      <p className="font-semibold text-lg mb-4 text-indigo-800">{question}</p>
      <div className="space-y-2">
        {options.map((option, idx) => (
          <button
            key={idx}
            className={`block w-full text-left px-4 py-2 rounded-md transition-colors ${
              selectedOption === option
                ? option === answer
                  ? 'bg-green-200 text-green-800'
                  : 'bg-red-200 text-red-800'
                : 'bg-white hover:bg-indigo-100 text-indigo-700'
            }`}
            onClick={() => handleOptionClick(option)}
            disabled={showExplanation}
          >
            {option}
          </button>
        ))}
      </div>
      {showExplanation && (
        <div className="mt-4 p-4 bg-white rounded-md">
          <p className={selectedOption === answer ? 'text-green-600 font-semibold' : 'text-red-600 font-semibold'}>
            {selectedOption === answer ? 'Correct!' : 'Incorrect.'}
          </p>
          <p className="text-gray-700 mt-2">{explanation}</p>
        </div>
      )}
    </div>
  );
};

export default EmbeddedQuiz;

================
File: app/components/InputBar.tsx
================
// components/InputBar.tsx
'use client';

import { useState, useContext } from 'react';
import axios from 'axios';
import { LearnContext } from '@/app/context/LearnContext';

const InputBar = () => {
  const [topic, setTopic] = useState('');
  const [loading, setLoading] = useState(false);
  const { setModules } = useContext(LearnContext);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!topic) return;
    setLoading(true);

    try {
      const response = await axios.post('/api/generate', { topic });
      setModules(response.data.modules);
    } catch (error) {
      console.error(error);
      alert('Failed to generate content. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="flex flex-col items-center">
      <h2 className="text-2xl font-semibold mb-4 text-indigo-600">
        What would you like to learn about?
      </h2>
      <div className="w-full max-w-md">
        <input
          type="text"
          value={topic}
          onChange={(e) => setTopic(e.target.value)}
          placeholder="Enter a topic..."
          className="w-full p-3 border border-indigo-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500"
        />
      </div>
      <button
        type="submit"
        className="mt-4 bg-indigo-600 text-white px-6 py-3 rounded-md hover:bg-indigo-700 transition duration-300 disabled:bg-indigo-400"
        disabled={loading}
      >
        {loading ? 'Generating...' : 'Generate Course'}
      </button>
    </form>
  );
};

export default InputBar;

================
File: app/components/Module.tsx
================
// app/components/Module.tsx
import { useState } from 'react';
import Article from '@/app/components/Article';
import QuizPage from '@/app/components/QuizPage';

interface ModuleProps {
  module: {
    title: string;
    article: string;
    quiz: {
      questions: {
        question: string;
        options: string[];
        answer: string;
        explanation: string;
      }[];
    };
  };
  index: number;
}

const Module = ({ module, index }: ModuleProps) => {
  const [showQuiz, setShowQuiz] = useState(false);
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [quizScore, setQuizScore] = useState(0);

  const handleQuizComplete = (score: number) => {
    setQuizScore(score);
    setQuizCompleted(true);
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-6 mb-6">
      <h2 className="text-2xl font-semibold mb-4 text-indigo-600">
        Module {index + 1}: {module.title}
      </h2>
      {!showQuiz && <Article content={module.article} />}
      {!showQuiz && (
        <button
          onClick={() => setShowQuiz(true)}
          className="bg-indigo-500 text-white px-4 py-2 rounded-md mt-6 hover:bg-indigo-600 transition duration-300"
        >
          Take End-of-Module Quiz
        </button>
      )}
      {showQuiz && !quizCompleted && (
        <QuizPage
          questions={module.quiz.questions}
          moduleTitle={module.title}
          onComplete={handleQuizComplete}
        />
      )}
      {quizCompleted && (
        <div className="mt-6">
          <p className="text-lg font-semibold">
            Quiz completed! Your score: {quizScore} / {module.quiz.questions.length}
          </p>
          <button
            onClick={() => {
              setShowQuiz(false);
              setQuizCompleted(false);
            }}
            className="bg-indigo-500 text-white px-4 py-2 rounded-md mt-4 hover:bg-indigo-600 transition duration-300"
          >
            Return to Article
          </button>
        </div>
      )}
    </div>
  );
};

export default Module;

================
File: app/components/ModuleList.tsx
================
// components/ModuleList.tsx
'use client';

import { useContext } from 'react';
import { LearnContext } from '../context/LearnContext';
import Module from '@/app/components/Module';

const ModuleList = () => {
  const { modules } = useContext(LearnContext);

  return (
    <div className="container mx-auto p-6 max-w-4xl">
      <h1 className="text-3xl font-bold mb-8 text-indigo-700">Your Learning Journey</h1>
      {modules.map((module, index) => (
        <Module 
          key={index} 
          module={module} 
          index={index} 
        />
      ))}
    </div>
  );
};

export default ModuleList;

================
File: app/components/ProgressBar.tsx
================
// components/ProgressBar.tsx
'use client';

interface ProgressBarProps {
  progress: number; // 0 to 100
}

export const ProgressBar = ({ progress }: ProgressBarProps) => {
  return (
    <div className="w-full bg-indigo-200 rounded-full h-4">
      <div
        className="bg-indigo-500 h-4 rounded-full transition-all duration-500 ease-out"
        style={{ width: `${progress}%` }}
      ></div>
    </div>
  );
};

================
File: app/components/Quiz.tsx
================
// app/components/Quiz.tsx
import { useState, useContext } from 'react';
import { LearnContext } from '../context/LearnContext';

interface Question {
  question: string;
  options: string[];
  answer: string;
  explanation: string;
}

interface QuizProps {
  questions: Question[];
  moduleIndex: number;
}

const Quiz = ({ questions, moduleIndex }: QuizProps) => {
  const [current, setCurrent] = useState(0);
  const [userAnswers, setUserAnswers] = useState<string[]>([]);
  const [showSummary, setShowSummary] = useState(false);
  const { modules, setProgress } = useContext(LearnContext);

  const handleOptionClick = (option: string) => {
    const newUserAnswers = [...userAnswers, option];
    setUserAnswers(newUserAnswers);

    const next = current + 1;
    if (next < questions.length) {
      setCurrent(next);
    } else {
      setShowSummary(true);
      updateProgress();
    }
  };

  const updateProgress = () => {
    const moduleProgress = ((moduleIndex + 1) / modules.length) * 100;
    setProgress(moduleProgress);
  };

  if (showSummary) {
    const correctCount = userAnswers.filter(
      (answer, idx) => answer === questions[idx].answer
    ).length;

    return (
      <div className="mt-6 p-6 bg-indigo-50 rounded-lg shadow-md">
        <h3 className="text-2xl font-semibold mb-4 text-indigo-800">Quiz Summary</h3>
        <p className="text-lg mb-6">
          You scored <span className="text-green-600 font-bold">{correctCount}</span> out of{' '}
          <span className="font-bold">{questions.length}</span>
        </p>
        <div className="space-y-6">
          {questions.map((q, idx) => (
            <div key={idx} className="bg-white p-4 rounded-md shadow">
              <p className="font-medium text-lg mb-2 text-indigo-700">
                {idx + 1}. {q.question}
              </p>
              <p className={`mb-1 ${userAnswers[idx] === q.answer ? 'text-green-600' : 'text-red-600'}`}>
                Your Answer: {userAnswers[idx]}
              </p>
              {userAnswers[idx] !== q.answer && (
                <p className="text-green-600 mb-1">Correct Answer: {q.answer}</p>
              )}
              <p className="text-gray-700 mt-2">Explanation: {q.explanation}</p>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="mt-6 bg-indigo-50 p-6 rounded-lg shadow-md">
      <div className="mb-4 text-lg font-medium text-indigo-800">
        Question {current + 1} of {questions.length}
      </div>
      <div className="mb-6 text-xl text-indigo-900">{questions[current].question}</div>
      <div className="space-y-3">
        {questions[current].options.map((option, idx) => (
          <button
            key={idx}
            onClick={() => handleOptionClick(option)}
            className="w-full text-left bg-white text-indigo-700 px-4 py-3 rounded-md hover:bg-indigo-100 transition duration-300"
          >
            {option}
          </button>
        ))}
      </div>
    </div>
  );
};

export default Quiz;

================
File: app/components/QuizPage.tsx
================
// app/components/QuizPage.tsx
import { useState } from 'react';

interface Question {
  question: string;
  options: string[];
  answer: string;
  explanation: string;
}

interface QuizPageProps {
  questions: Question[];
  moduleTitle: string;
  onComplete: (score: number) => void;
}

const QuizPage: React.FC<QuizPageProps> = ({ questions, moduleTitle, onComplete }) => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [userAnswers, setUserAnswers] = useState<string[]>([]);
  const [showSummary, setShowSummary] = useState(false);

  const handleAnswer = (selectedOption: string) => {
    const newUserAnswers = [...userAnswers, selectedOption];
    setUserAnswers(newUserAnswers);

    if (currentQuestion + 1 < questions.length) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowSummary(true);
      const score = newUserAnswers.filter((answer, index) => answer === questions[index].answer).length;
      onComplete(score);
    }
  };

  if (showSummary) {
    const score = userAnswers.filter((answer, index) => answer === questions[index].answer).length;
    return (
      <div className="bg-white p-6 rounded-lg shadow-md">
        <h2 className="text-2xl font-bold mb-4 text-indigo-700">Quiz Summary: {moduleTitle}</h2>
        <p className="text-lg mb-4">You scored {score} out of {questions.length}</p>
        <div className="space-y-4">
          {questions.map((question, index) => (
            <div key={index} className="border-b pb-4">
              <p className="font-semibold">{question.question}</p>
              <p className={userAnswers[index] === question.answer ? "text-green-600" : "text-red-600"}>
                Your answer: {userAnswers[index]}
              </p>
              {userAnswers[index] !== question.answer && (
                <p className="text-green-600">Correct answer: {question.answer}</p>
              )}
              <p className="text-gray-600 mt-2">{question.explanation}</p>
            </div>
          ))}
        </div>
      </div>
    );
  }

  const question = questions[currentQuestion];

  return (
    <div className="bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4 text-indigo-700">Quiz: {moduleTitle}</h2>
      <p className="mb-4">Question {currentQuestion + 1} of {questions.length}</p>
      <p className="text-lg font-semibold mb-4">{question.question}</p>
      <div className="space-y-2">
        {question.options.map((option, index) => (
          <button
            key={index}
            onClick={() => handleAnswer(option)}
            className="w-full text-left p-2 rounded-md bg-indigo-50 hover:bg-indigo-100 transition-colors"
          >
            {option}
          </button>
        ))}
      </div>
    </div>
  );
};

export default QuizPage;

================
File: app/components/Sidebar.tsx
================
// app/components/Sidebar.tsx
'use client';

import { useContext } from 'react';
import { LearnContext } from '../context/LearnContext';
import { ProgressBar } from '@/app/components/ProgressBar';

const Sidebar = () => {
  const { progress, modules } = useContext(LearnContext);

  return (
    <div className="w-64 bg-indigo-800 text-white shadow-md p-6 fixed h-full overflow-auto">
      <h2 className="text-2xl font-semibold mb-6">Course Progress</h2>
      <ProgressBar progress={progress} />
      <div className="mt-8">
        <h3 className="text-xl font-medium mb-4">Modules</h3>
        <ul className="space-y-3">
          {modules.map((module, index) => (
            <li key={index} className="flex items-center">
              <span className="mr-2 bg-indigo-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm">
                {index + 1}
              </span>
              <span className="truncate text-indigo-100 hover:text-white transition duration-300">
                {module.title}
              </span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default Sidebar;

================
File: app/context/LearnContext.tsx
================
// context/LearnContext.tsx
"use client";

import { createContext, useState, ReactNode } from 'react';

interface Question {
  question: string;
  options: string[];
  answer: string;
  explanation: string;
}

interface QuizSummaryDetail {
  question: string;
  yourAnswer: string;
  correctAnswer: string;
  explanation: string;
}

interface Quiz {
  questions: Question[];
  summary: {
    total: number;
    correct: number;
    incorrect: number;
    details: QuizSummaryDetail[];
  };
}

interface Module {
  title: string;
  article: string; // Changed from 'content' to 'article'
  quiz: Quiz;
}

interface LearnContextType {
  modules: Module[];
  setModules: (modules: Module[]) => void;
  progress: number; // Percentage (0 to 100)
  setProgress: (progress: number) => void;
}

export const LearnContext = createContext<LearnContextType>({
  modules: [],
  setModules: () => {},
  progress: 0,
  setProgress: () => {},
});

export const LearnProvider = ({ children }: { children: ReactNode }) => {
  const [modules, setModules] = useState<Module[]>([]);
  const [progress, setProgress] = useState(0);

  return (
    <LearnContext.Provider value={{ modules, setModules, progress, setProgress }}>
      {children}
    </LearnContext.Provider>
  );
};

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

================
File: app/layout.tsx
================
// app/layout.tsx
import './globals.css';
import { ReactNode } from 'react';
import { Inter } from 'next/font/google';
import { LearnProvider } from '@/app/context/LearnContext';
import Sidebar from '@/app/components/Sidebar';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Interactive Learning Platform',
  description: 'Learn with AI-generated interactive quizzes and articles',
};

export default function RootLayout({ children }: { children: ReactNode }) {
  return (
    <html lang="en" className={inter.className}>
      <body className="bg-gray-100 text-gray-900 flex">
        <LearnProvider>
          <Sidebar />
          <main className="ml-64 w-full min-h-screen p-6">{children}</main>
        </LearnProvider>
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
// app/page.tsx
'use client';

import { useContext } from 'react';
import InputBar from '@/app/components/InputBar';
import ModuleList from '@/app/components/ModuleList';
import { LearnContext } from '@/app/context/LearnContext';

const Home = () => {
  const { modules } = useContext(LearnContext);

  return (
    <div className="min-h-screen flex flex-col items-center">
      {!modules.length ? (
        <div className="w-full max-w-4xl mt-20">
          <h1 className="text-4xl font-bold text-center mb-8 text-indigo-700">
            Interactive Learning Platform
          </h1>
          <InputBar />
        </div>
      ) : (
        <ModuleList />
      )}
    </div>
  );
};

export default Home;

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "interactive-learning-platform",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tailwindcss/typography": "^0.5.15",
    "@types/react-katex": "^3.0.4",
    "axios": "^1.7.7",
    "katex": "^0.16.11",
    "next": "14.2.15",
    "openai": "^4.68.1",
    "react": "^18",
    "react-dom": "^18",
    "react-katex": "^3.0.1",
    "react-markdown": "^9.0.1",
    "rehype-katex": "^7.0.1",
    "remark-gfm": "^4.0.0",
    "remark-math": "^6.0.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.20",
    "eslint": "^8",
    "eslint-config-next": "14.2.15",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'],
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
  ],
};

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "target": "ES2023",
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
